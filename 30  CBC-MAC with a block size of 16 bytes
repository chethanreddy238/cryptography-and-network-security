import random

def generate_random_key():
  """Generates a random key of the given size.

  Args:
    size: The size of the key, in bytes.

  Returns:
    The random key.
  """
  return random.getrandbits(size * 8)

def cbc_mac(message, key):
  """Computes the CBC-MAC of the given message using the given key.

  Args:
    message: The message to compute the MAC for.
    key: The key to use for computing the MAC.

  Returns:
    The CBC-MAC of the message.
  """

  # Initialize the IV.
  iv = generate_random_key(16)

  # Iterate over the message blocks.
  for block in message:

    # XOR the block with the IV.
    block = block ^ iv

    # Encrypt the block using the key.
    ciphertext = encrypt(block, key)

    # Update the IV.
    iv = ciphertext

  # Return the MAC.
  return iv

def encrypt(plaintext, key):
  """Encrypts the given plaintext using the given key.

  Args:
    plaintext: The plaintext to encrypt.
    key: The key to use for encrypting the plaintext.

  Returns:
    The encrypted plaintext.
  """

  # Convert the plaintext to bytes.
  plaintext = plaintext.encode("utf-8")

  # Initialize the cipher.
  cipher = Cipher(algorithms.AES(key), modes.CBC(iv))

  # Encrypt the plaintext.
  ciphertext = cipher.encrypt(plaintext)

  # Return the encrypted plaintext.
  return ciphertext.hex()

def main():
  # Generate a message.
  message = "Hello, world!"

  # Generate a key.
  key = generate_random_key(16)

  # Compute the CBC-MAC of the message.
  mac = cbc_mac(message, key)

  # Print the MAC.
  print(mac)

if __name__ == "__main__":
  main()
